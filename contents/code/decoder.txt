public class Decoder {

	public static ModeSReply genericDecoder (String raw_message) throws BadFormatException, UnspecifiedFormatError {
		ModeSReply modes = new ModeSReply(raw_message);
		
		if (modes.getDownlinkFormat() == 4) {
			return new AltitudeReply(modes);
		}
		else if (modes.getDownlinkFormat() == 5) {
			return new IdentifyReply(modes);
		}
		else if (modes.getDownlinkFormat() == 11) {
			return new AllCallReply(modes);
		}
		else if (modes.getDownlinkFormat() == 17 || modes.getDownlinkFormat() == 18) {
			ExtendedSquitter es1090 = new ExtendedSquitter(modes);

			// what kind of extended squitter?
			byte ftc = es1090.getFormatTypeCode();

			if (ftc >= 1 && ftc <= 4) // identification message
				return new IdentificationMsg(es1090);

			if (ftc >= 5 && ftc <= 8) // surface position message
				return new SurfacePositionMsg(es1090);

			if ((ftc >= 9 && ftc <= 18) || (ftc >= 20 && ftc <= 22)) // airborne position message
				return new AirbornePositionMsg(es1090);

			if (ftc == 19) { // possible velocity message, check subtype
				int subtype = es1090.getMessage()[0]&0x7;

				if (subtype == 1 || subtype == 2) // velocity over ground
					return new VelocityOverGroundMsg(es1090);
				else if (subtype == 3 || subtype == 4) // airspeed & heading
					return new AirspeedHeadingMsg(es1090);
			}

			if (ftc == 28) { // aircraft status message, check subtype
				int subtype = es1090.getMessage()[0]&0x7;

				if (subtype == 1) // emergency/priority status
					return new EmergencyOrPriorityStatusMsg(es1090);
				if (subtype == 2) // TCAS resolution advisory report
					return new TCASResolutionAdvisoryMsg(es1090);
			}

			if (ftc == 31) { // operational status message
				int subtype = es1090.getMessage()[0]&0x7;

				if (subtype == 0 || subtype == 1) // airborne or surface?
					return new OperationalStatusMsg(es1090);
			}

			return es1090; // unknown extended squitter
		}
		else if (modes.getDownlinkFormat() == 20) {
			return new CommBAltitudeReply(modes);
		}
		else if (modes.getDownlinkFormat() == 21) {
			return new CommBIdentifyReply(modes);
		}

		return modes; // unknown mode s reply
	}

}
