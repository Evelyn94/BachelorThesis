def F(self, n, T, i, B):
    if T == 0:
        t = 0
    else:
        t = len(T)

    beta = math.ceil(n / 2.0)
    b = int(math.ceil(math.ceil(beta * math.log(self._radix, 2)) / 8.0))
    d = 4 * int(math.ceil(b / 4.0))

    if self.isEven(i):
        m = int(math.floor(n / 2.0))
    else:
        m = int(math.ceil(n / 2.0))

    if not self._P.get(n):
        P = '\x01'  # vers
        P += '\x02'  # method
        P += '\x01'  # addition
        P += long_to_bytes(self._radix, 3)
        P += '\x0a' # always ten
        P += long_to_bytes(self.split(n)%256, 1)
        P += long_to_bytes(n, 4)
        P += long_to_bytes(t, 4)
        self._P[n] = P

    if T == 0:
        Q = ''
    else:
        Q = str(T)
            
    Q += '\x00' * (((-1 * t) - b - 1) % 16)
    Q += long_to_bytes(i, blocksize=1)
        
    _B_as_bytes = long_to_bytes(B)
    Q += '\x00' * (b - len(_B_as_bytes))
    Q += _B_as_bytes[-b:]

    _cbc = AES.new(self._K, AES.MODE_CBC, '\x00' * 16)

    assert len(self._P[n]) % 16 == 0
    assert len(Q) % 16 == 0

    Y = _cbc.encrypt(self._P[n] + Q)[-16:]

    i = 1
    TMP = Y
    while len(TMP) < (d + 4):
        left = FFXInteger(bytes_to_long(Y), radix=self._radix, blocksize=32)
        right = FFXInteger(str(i), radix=10, blocksize=16)
        X = self.add(left, right)
        TMP += self._ecb.encrypt(X.to_bytes(16))
        i += 1

    y = bytes_to_long(TMP[:(d + 4)])
    z = y % (self._radix ** m)

    return z